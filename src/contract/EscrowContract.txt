// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract MatchEscrow {
    struct Game {
        address player1;
        address player2;
        uint256 player1Stake;
        uint256 player2Stake;
        bool player2Joined;
        bool completed;
        bool refunded;
    }

    mapping(string => Game) public games;
    mapping(string => uint256) public creationTimestamps;

    uint256 public timeout = 10 minutes;

    // Create a match
    function createGame(string calldata gameId) external payable {
        require(msg.value > 0, "Stake required");
        require(games[gameId].player1 == address(0), "Game ID already used");

        games[gameId] = Game({
            player1: msg.sender,
            player2: address(0),
            player1Stake: msg.value,
            player2Stake: 0,
            player2Joined: false,
            completed: false,
            refunded: false
        });

        creationTimestamps[gameId] = block.timestamp;
    }

    // Join a match
    function joinGame(string calldata gameId) external payable {
        Game storage game = games[gameId];
        require(game.player1 != address(0), "Game doesn't exist");
        require(!game.player2Joined, "Game already joined");
        require(msg.value > 0, "Stake required");
        require(msg.sender != game.player1, "Cannot join your own game");

        game.player2 = msg.sender;
        game.player2Stake = msg.value;
        game.player2Joined = true;
    }

    // Backend declares winner
    function declareWinner(string calldata gameId, address winner) external {
        Game storage game = games[gameId];
        require(game.player2Joined, "Game not started");
        require(!game.completed, "Already completed");

        game.completed = true;

        uint256 totalPot = game.player1Stake + game.player2Stake;
        payable(winner).transfer(totalPot);
    }

    // Backend declares draw
    function declareDraw(string calldata gameId) external {
        Game storage game = games[gameId];
        require(game.player2Joined, "Game not started");
        require(!game.completed, "Already completed");

        game.completed = true;

        payable(game.player1).transfer(game.player1Stake);
        payable(game.player2).transfer(game.player2Stake);
    }

    // Auto-refund if no player 2 after timeout
    function triggerTimeoutRefund(string calldata gameId) external {
        Game storage game = games[gameId];
        require(!game.player2Joined, "Player 2 already joined");
        require(!game.refunded, "Already refunded");
        require(block.timestamp >= creationTimestamps[gameId] + timeout, "Timeout not reached");

        game.refunded = true;

        payable(game.player1).transfer(game.player1Stake);
    }
}
